## 字符串

## sep="\n"表示转行
s1 = r'\'hello, world!\''
s2 = r'\n\\hello, world!\\\n'
print(s1, s2, sep="\n")

s1 = 'hello ' * 3
print(s1) # hello hello hello 
s2 = 'world'
s1 += s2
print(s1) # hello hello hello world
## 查询指定字符串是否存在于该字符串
print('ll' in s1) # True
print('good' in s1) # False
print("good" not in s1) # True

str2 = 'abc123456'
# 从字符串中取出指定位置的字符(下标运算)
print(str2[2]) # c

# 字符串切片(从指定的开始索引到指定的结束索引)
print(str2[2:5]) # c12
print(str2[2:]) # c123456
print(str2[2::2]) # c246
print(str2[::2]) # ac246
print(str2[::-1]) # 654321cba
print(str2[-3:-1]) # 45
## str[a::b], a=起始下标, b=步长

str3 = 'hello, world!'
## 计算字符串长度
print(len(str3))

## 字符串首字母大写
print(str3.capitalize())

## 字符串每个单词首字母大写
print(str3.title())

## 字符串每个字母变大写
print(str3.upper())

## 查找子字符串位置
print(str3.find('or'))
print(str3.find('and'))   ## 找不到输出 -1

print(str3.index('or'))
"""print(str3.index('and'))"""  ## 找不到会报错

## 检查字符串是否以指定字符串开头/结尾
print(str3.startswith('hell'))  ## 返回bool值
print(str3.endswith('d!'))      ## 返回bool值

## 将字符串以指定的宽度居中并在两侧填充指定的字符
print(str3.center(50,'*'))      ## ******************hello, world!*******************

## 将字符串已指定的宽度靠右放置，左侧填充指定的字符
print(str3.rjust(50,'*'))       ## *************************************hello, world!

str4 = 'abcd1234'
## 检查字符串是否特定类型组成
print(str4.isdigit())   ## 是否由数字组成，返回bool值
print(str4.isalpha())   ## 是否由字母组成，返回bool值
print(str4.isalnum())   ## 是否由数字和字母组成，返回bool值
print(str4.isdecimal()) ## 是否只包含十进制字符，返回bool值

str5 = ' fdsff    '
## 去除字符串两侧空格
print(str5.strip())


## 列表
list1 = [1,2,3,4,5,9]
print(list1)     ## [1, 2, 3, 4, 5, 9]
print(list1*3)   ## [1, 2, 3, 4, 5, 9, 1, 2, 3, 4, 5, 9, 1, 2, 3, 4, 5, 9]
print(len(list1))  ## 6
## 下标索引
print(list1[2])    ## 3
print(list1[-1])   ## 9
## 修改列表内元素
list1[2]=4
print(list1)
## 遍历列表内元素
### 用下标遍历
for index in range(len(list1)):
    print(list1[index])  
for number in list1:
    print(number)
## enumerate函数处理列表，同时获得元素索引和值
for index, number in enumerate(list1):
    print(index,number)

### 添加/删除元素
list1.append(10)
print(list1)    ## 在最后添加，[1, 2, 4, 4, 5, 9, 10]
list1.insert(2,20)
print(list1)    ## 在指定下标处添加，[1, 2, 20, 4, 4, 5, 9, 10]

list1.extend([100,200])   
print(list1)              ## 合并两个列表, 在最后添加
list2 = [300,400]
list1.extend(list2)
print(list1)
list1 += [100,200]
print(list1)

## 判断元素是否存在，存在就删除
if 4 in list1:
    list1.remove(4)
print(list1)               ## 删除第一个与指定元素相同的元素

list1.pop(2)
print(list1)               ## 删除指定下标的元素

del list1[2:4]             ## 删除指定下标的元素/删除一段连续的元素
print(list1)

list1.clear()              ## 清空元素
print(list1)


### 列表切片
fruits = ['grape', 'apple', 'strawberry', 'waxberry']
fruits += ['pitaya', 'pear', 'mango']
fruits2 = fruits[1:4]      
print(fruits2)             ## ['apple', 'strawberry', 'waxberry']
fruits3 = fruits[:]
print(fruits3)             ## ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango']
fruits4 = fruits[::-1]
print(fruits4)

list3 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry']
list4 = sorted(list3)      ## 按字母表顺序排序
list5 = sorted(list3,reverse=True)   ## 按字母表倒序排序
list6 = sorted(list3,key=len)        ## 按字符串长度排序
list7 = sorted(list3,key=len,reverse=True)   ## 按字符串长度倒序排序
## 不修改列表
print(list3)    
print(list4)
print(list5)
print(list6)
print(list7)
list3.sort(reverse=True)    
##  修改列表
print(list3)

 
import sys
 ## 生成式
f = [x for x in range(1,10)]
print(f)
f = [x+y for x in "123" for y in "ABVC"]
print(f)  ## ['1A', '1B', '1V', '1C', '2A', '2B', '2V', '2C', '3A', '3B', '3V', '3C']
f = [x ** 2 for x in range(1,100)]
print(sys.getsizeof(f) / 1024 / 1024 ,'MB')  ## 直接创建列表，占用内存
print(f)
## 生成器
f = (x ** 2 for x in range(1,100))
print(sys.getsizeof(f))
for val in f:
    print(val)    ## 创建生成器，需要数据是内部计算，需要花费额外时间
## 使用yield关键字改造成生成器函数
def fib(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a+b
        yield a
def main():
    for val in fib(20):
        print(val)
if __name__=='__main__':
    main()


## 元组  可存储多个数据，但元素不可修改
t = ('骆昊', 38, True, '四川成都')
print(t)
print(t[1])
print(t[-1])
for number in t:
    print(number)
t = ('王大锤', 20, True, '云南昆明')
print(t)              ## 变量t重新引用新的元组，之前的元组回收
## 将元组转换为列表
person = list(t)
print(person)
## 将列表转换为元组
human = tuple(person)
print(human)


## 集合
set1 = {1,2,3,4,5,6}
print(set1)
print('length=',len(set1))
## 创建集合的构造器语法
set2 = set(range(1,10))
set3 = set((1,2,3,4,6,9))
print(set2,set3)
## 创建集合的推导式语法
set4 = set(num for num in range(1,100) if num % 3 ==0 or num % 5 ==0)
print(set4)
