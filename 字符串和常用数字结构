## 字符串

## sep="\n"表示转行
s1 = r'\'hello, world!\''
s2 = r'\n\\hello, world!\\\n'
print(s1, s2, sep="\n")

s1 = 'hello ' * 3
print(s1) # hello hello hello 
s2 = 'world'
s1 += s2
print(s1) # hello hello hello world
## 查询指定字符串是否存在于该字符串
print('ll' in s1) # True
print('good' in s1) # False
print("good" not in s1) # True

str2 = 'abc123456'
# 从字符串中取出指定位置的字符(下标运算)
print(str2[2]) # c

# 字符串切片(从指定的开始索引到指定的结束索引)
print(str2[2:5]) # c12
print(str2[2:]) # c123456
print(str2[2::2]) # c246
print(str2[::2]) # ac246
print(str2[::-1]) # 654321cba
print(str2[-3:-1]) # 45
## str[a::b], a=起始下标, b=步长

str3 = 'hello, world!'
## 计算字符串长度
print(len(str3))

## 字符串首字母大写
print(str3.capitalize())

## 字符串每个单词首字母大写
print(str3.title())

## 字符串每个字母变大写
print(str3.upper())

## 查找子字符串位置
print(str3.find('or'))
print(str3.find('and'))   ## 找不到输出 -1

print(str3.index('or'))
"""print(str3.index('and'))"""  ## 找不到会报错

## 检查字符串是否以指定字符串开头/结尾
print(str3.startswith('hell'))  ## 返回bool值
print(str3.endswith('d!'))      ## 返回bool值

## 将字符串以指定的宽度居中并在两侧填充指定的字符
print(str3.center(50,'*'))      ## ******************hello, world!*******************

## 将字符串已指定的宽度靠右放置，左侧填充指定的字符
print(str3.rjust(50,'*'))       ## *************************************hello, world!

str4 = 'abcd1234'
## 检查字符串是否特定类型组成
print(str4.isdigit())   ## 是否由数字组成，返回bool值
print(str4.isalpha())   ## 是否由字母组成，返回bool值
print(str4.isalnum())   ## 是否由数字和字母组成，返回bool值
print(str4.isdecimal()) ## 是否只包含十进制字符，返回bool值

str5 = ' fdsff    '
## 去除字符串两侧空格
print(str5.strip())


## 列表
list1 = [1,2,3,4,5,9]
print(list1)     ## [1, 2, 3, 4, 5, 9]
print(list1*3)   ## [1, 2, 3, 4, 5, 9, 1, 2, 3, 4, 5, 9, 1, 2, 3, 4, 5, 9]
print(len(list1))  ## 6
## 下标索引
print(list1[2])    ## 3
print(list1[-1])   ## 9
## 修改列表内元素
list1[2]=4
print(list1)
## 遍历列表内元素
### 用下标遍历
for index in range(len(list1)):
    print(list1[index])  
for number in list1:
    print(number)
## enumerate函数处理列表，同时获得元素索引和值
for index, number in enumerate(list1):
    print(index,number)

### 添加/删除元素
list1.append(10)
print(list1)    ## 在最后添加，[1, 2, 4, 4, 5, 9, 10]
list1.insert(2,20)
print(list1)    ## 在指定下标处添加，[1, 2, 20, 4, 4, 5, 9, 10]

list1.extend([100,200])   
print(list1)              ## 合并两个列表, 在最后添加
list2 = [300,400]
list1.extend(list2)
print(list1)
list1 += [100,200]
print(list1)

## 判断元素是否存在，存在就删除
if 4 in list1:
    list1.remove(4)
print(list1)               ## 删除第一个与指定元素相同的元素

list1.pop(2)
print(list1)               ## 删除指定下标的元素

del list1[2:4]             ## 删除指定下标的元素/删除一段连续的元素
print(list1)

list1.clear()              ## 清空元素
print(list1)


### 列表切片
fruits = ['grape', 'apple', 'strawberry', 'waxberry']
fruits += ['pitaya', 'pear', 'mango']
fruits2 = fruits[1:4]      
print(fruits2)             ## ['apple', 'strawberry', 'waxberry']
fruits3 = fruits[:]
print(fruits3)             ## ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango']
fruits4 = fruits[::-1]
print(fruits4)

list3 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry']
list4 = sorted(list3)      ## 按字母表顺序排序
list5 = sorted(list3,reverse=True)   ## 按字母表倒序排序
list6 = sorted(list3,key=len)        ## 按字符串长度排序
list7 = sorted(list3,key=len,reverse=True)   ## 按字符串长度倒序排序
## 不修改列表
print(list3)    
print(list4)
print(list5)
print(list6)
print(list7)
list3.sort(reverse=True)    
##  修改列表
print(list3)

 
import sys
 ## 生成式
f = [x for x in range(1,10)]
print(f)
f = [x+y for x in "123" for y in "ABVC"]
print(f)  ## ['1A', '1B', '1V', '1C', '2A', '2B', '2V', '2C', '3A', '3B', '3V', '3C']
f = [x ** 2 for x in range(1,100)]
print(sys.getsizeof(f) / 1024 / 1024 ,'MB')  ## 直接创建列表，占用内存
print(f)
## 生成器
f = (x ** 2 for x in range(1,100))
print(sys.getsizeof(f))
for val in f:
    print(val)    ## 创建生成器，需要数据是内部计算，需要花费额外时间
## 使用yield关键字改造成生成器函数
def fib(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a+b
        yield a
def main():
    for val in fib(20):
        print(val)
if __name__=='__main__':
    main()


## 元组  可存储多个数据，但元素不可修改
t = ('骆昊', 38, True, '四川成都')
print(t)
print(t[1])
print(t[-1])
for number in t:
    print(number)
t = ('王大锤', 20, True, '云南昆明')
print(t)              ## 变量t重新引用新的元组，之前的元组回收
## 将元组转换为列表
person = list(t)
print(person)
## 将列表转换为元组
human = tuple(person)
print(human)


## 集合
set1 = {1,2,3,4,5,6}
print(set1)
print('length=',len(set1))
## 创建集合的构造器语法
set2 = set(range(1,10))
set3 = set((1,2,3,4,6,9))
print(set2,set3)
## 创建集合的推导式语法
set4 = set(num for num in range(1,100) if num % 3 ==0 or num % 5 ==0)
print(set4)


set1.add(0)
print(set1)
set2.update([11,12])
print(set2)
set2.discard(5)
print(set2)
set2.pop()     ## 默认删除第一个数
print(set2)

## 集合的运算
print(set1 & set2)
print(set1.intersection(set2))       ## 交集

print(set1 | set2)
print(set1.union(set2))              ## 并集

print(set1 - set2)
print(set1.difference(set2))

print(set1 ^ set2)
print(set1.symmetric_difference(set2))   ## 并集-交集

print(set2 <= set1)
print(set2.issubset(set1))            ## 判断集合大小，返回bool值


## 字典
## 可储存任意对象，由一个键和一个值组成的“键值对”

## 字面量语法
scores = {'罗皓':95,'fafd':78}
print(scores)
## 构造器语法
items1 = dict(one=1,two=2,three=3,four=4)
items2 = dict(zip(['a','b','c'],'123'))   ## 通过zip函数，将两个序列压成字典
## 推导式语法
items3 = {num: num **2 for num in range(1,10)}
print(items1,items2,items3)

## 遍历
for key in items3:
    print(f'{key}:{items3[key]}')

## 修改
items3[1] = 2
print(items3)

scores.update(fds=33,www=34)
print(scores)


if 'www' in scores:
    print(scores["www"])
print(scores.get('www'))

print(scores.get('wwwww',80))    ## 可设置默认值

print(scores.popitem())          ## 默认删除最后一个值
print(scores.pop('罗皓'))
print(scores)

scores.clear()
print(scores)



## 练习

### 跑马灯
""" import os
import time
def main():
    content = '北京欢迎你...'
    while True:
      os.system('cls')
      print(content)   
      time.sleep(2.0)
      content = content[1:] + content[0]
if __name__ == '__main__':
    main() """


### 验证码产生器
"""import random
def code():
    all_number = '0123456789'
    all_minuscules = 'abcdefghijklmnopqrstuvwxyz'
    all_majuscules = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    index1 = random.randint(0,len(all_number)-1)
    index2 = random.randint(0,len(all_minuscules)-1)
    index3 = random.randint(0,len(all_majuscules)-1)
    code1 = all_number[index1]
    code2 = all_minuscules[index2]
    code3 = all_majuscules[index3]
    A = random.randint(1,3)
    if A ==1:
        index4 = random.randint(0,len(all_number)-1)
        code4 = all_number[index4]
    elif A == 2:
        index4 = random.randint(0,len(all_minuscules)-1)
        code4 = all_minuscules[index4]
    else:
        index4 = random.randint(0,len(all_majuscules)-1)
        code4 = all_majuscules[index4]
    code = code1 + code2 + code3 + code4
    return code
if __name__ == '__main__':
    for i in range(1,100):
      print(code()) """

""" def produce_code (code_len=4):
    all_chars='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    code = ''
    for var in range(code_len):
        index = random.randint(0,len(all_chars)-1)
        code += all_chars[index]
    return code
if __name__ == '__main__':
    for i in range(1,100):
      print(produce_code(code_len=8)) """

### 返回文件后缀名
def get_suffix(file_name):
    suffix = ''
    for val in range(len(file_name)-1,0,-1):
        if file_name[val]=='.':
            needed_val = val
            break
    for _ in range(needed_val+1,len(file_name)):
        suffix += file_name[_]  ## suffix = file_name[needed_val+1:]
    return suffix
if __name__ == '__main__':
    filename = input('请输入文件名：')
    print('文件的后缀名是:',get_suffix(filename))
    
'''
def get_suffix(filename, has_dot=False):
    """
    获取文件名的后缀名
    :param filename: 文件名
    :param has_dot: 返回的后缀名是否需要带点
    :return: 文件的后缀名
    """
    pos = filename.rfind('.')       ## rfind函数用法:返回()内字符最后一次出现的下标
    if 0 < pos < len(filename) - 1:
        index = pos if has_dot else pos + 1
        return filename[index:]
    else:
        return ''
if __name__ == '__main__':
    filename = input('请输入文件名：')
    print(get_suffix(filename))
'''
## 返回列表中前二大小的值
""" def max(x):
    m0,m1 = (x[0],x[1]) if x[0] > x[1] else (x[1],x[0])
    for index in range(2,len(x)):
        if x[index] > m0:
            m1 = m0
            m0 = x[index]     
        elif x[index] > m1:
            m1 = x[index]
    return m0,m1
if __name__ == '__main__':
    x = eval(input())              ## 将输入的字符串转换为列表
    print(max(x)) """

""" ## 计算天数
def days(date):
    Day = [31,28,31,30,31,30,31,31,30,31,30,31]
    year = int(date[0:4])    
    month = int(date[4:6])
    day = int(date[6:])
    if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):
        Day[1]=29
    total_day = 0
    for val in range(month-1):
        total_day += Day[val]
    return (total_day + day)
if __name__ == '__main__':
    date_now = input()
    print(days(date_now))  
 """

## 杨辉三角   *
""" def triangle(row):
    Yang = [[]] * row
    for val in range(len(Yang)):
        Yang[val] = [None] * (val+1)
        for col in range(len(Yang[val])):
            if col ==0 or col == val:
                Yang[val][col] == 1
            else:
                Yang[val][col] = Yang[val-1][col] + Yang[val-1][col-1]
            print(Yang[val][col],end='\t')
        print()
if __name__ == '__main__':
    triangle(int(input()))
 """

## 五子棋
def generate(numRows):
    res = []
    for i in range(numRows):
        row = [1] * (i+1)
        if i > 1:
            for j in range(1, i):
                row[j] = res[i-1][j-1] + res[i-1][j]
        res.append(row)
    return res

n = int(input("请输入要输出的行数："))
triangle = generate(n)
for i in range(n):
    print(" "*(n-i), end="")
    for j in range(i+1):
        print(triangle[i][j], end=" ")
    print("")
